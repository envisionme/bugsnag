<?php

/**
 * @file
 * Bugsnag.com integration.
 */

/**
 * Implements hook_menu().
 */
function bugsnag_menu() {
  $items = array();
  $items['admin/settings/bugsnag'] = array(
    'title' => 'Bugsnag',
    'description' => 'Integrate with Bugsnag.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bugsnag_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Page callback for Bugsnap settings form.
 */
function bugsnag_form() {
  $library = libraries_get_path('bugsnag-php');
  $description = isset($library) ? t('Track errors with Bugsnag.') : '<span class="warning">' . t('You must install the Bugsnag library') . '</span>';

  $options = _bugsnag_severity_list();

  $form['bugsnag_apikey'] = array(
    '#type' => 'textfield',
    '#title' => t('API key'),
    '#default_value' => variable_get('bugsnag_apikey', ''),
    '#description' => t('Your Bugsnag API key.'),
  );

  $form['bugsnag_limit'] = array(
    '#type' => 'select',
    '#title' => t('Minimum severity to report to Bugsnag'),
    '#options' => $options,
    '#default_value' => variable_get('bugsnag_limit', WATCHDOG_ERROR),
    '#description' => $description,
  );

  $form['bugsnag_release_stage'] = array(
    '#type' => 'select',
    '#title' => t('Release stage'),
    '#options' => array(
      'development' => t('Development'),
      'production' => t('Production')
    ),
    '#default_value' => variable_get('bugsnag_release_stage', 'development'),
    '#description' => t('The release stage of this Drupal instance.'),
  );

  $form['bugsnag_project_root'] = array(
    '#type' => 'textfield',
    '#title' => t('Project route'),
    '#default_value' => variable_get('bugsnag_project_root', $_SERVER['DOCUMENT_ROOT']),
    '#description' => t('Project lines withing this route will be marked as in-project'),
  );

  $form['bugsnag_app_version'] = array(
    '#type' => 'textfield',
    '#title' => t('App version'),
    '#default_value' => variable_get('bugsnag_app_version', null),
    '#description' => t('Bugsnag can display these versions on your Bugsnag dashboard.'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_libraries_info().
 */
function bugsnag_libraries_info() {
  $libraries['bugsnag-php'] = array(
    'name' => 'Bugsnag PHP',
    'vendor url' => 'https://bugsnag.com/',
    'download url' => 'https://github.com/bugsnag/bugsnag-php/',
    'version callback' => 'bugsnag_get_version',
    'path' => 'src/Bugsnag',
    'files' => array(
      'php' => array('Autoload.php'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_watchdog().
 */
function bugsnag_watchdog($log_entry) {
  if (!_bugsnag_load_library()) {
    return;
  }

  $bugsnag_limit = variable_get('bugsnag_limit', WATCHDOG_ERROR);
  $library = libraries_get_path('bugsnag-php');

  if ($library['installed']) {
    $bugsnag_limit = variable_get('bugsnag_limit', WATCHDOG_ERROR);
    if (isset($log_entry['severity']) && $log_entry['severity'] > $bugsnag_limit) {
      return;
    }

    $severity_list = _bugsnag_severity_list();
    $severity = $severity_list[$log_entry['severity']];

    $bugsnag = new Bugsnag_Client(variable_get('bugsnag_apikey', ''));
    $bugsnag->setReleaseStage(variable_get('bugsnag_release_stage', 'development'));
    $bugsnag->setContext($log_entry['type']);
    $bugsnag->setType('Drupal');
    $bugsnag->setProjectRoot(variable_get('bugsnag_project_root', $_SERVER['DOCUMENT_ROOT']));
    $bugsnag->setAppVersion(variable_get('bugsnag_app_version', null));

    $user = $log_entry['user'];
    if ($user->uid) {
      $bugsnag_user = array(
        'id' => $log_entry['user']->uid,
        'name' => $log_entry['user']->name,
        'email' => $log_entry['user']->mail,
      );
      $bugsnag->setUser($bugsnag_user);
    }

    $bugsnag->notifyError($severity, $log_entry['message']);
  }
}

/**
 * Load Bugsnag library.
 */
function _bugsnag_load_library() {
   if (!class_exists('Bugsnag')) {
    if (!($library_path = _bugsnag_get_path())) {
      return FALSE;
    }
    require_once './'. $library_path .'/src/Bugsnag/Autoload.php';
  }
  return TRUE;
}

/**
 * Get path to Bugsnag library.
 */
function _bugsnag_get_path() {
  $library_path = libraries_get_path('bugsnag-php');
  if (!file_exists('./'. $library_path .'/src/Bugsnag/Autoload.php')) {
    return FALSE;
  }
  return $library_path;
}

/**
 * Return watchdog severity options.
 */
function _bugsnag_severity_list() {
  return array(
    WATCHDOG_EMERG => t('Emergency'),
    WATCHDOG_ALERT => t('Alert'),
    WATCHDOG_CRITICAL => t('Critical'),
    WATCHDOG_ERROR => t('Error'),
    WATCHDOG_WARNING => t('Warning'),
    WATCHDOG_NOTICE => t('Notice'),
    WATCHDOG_INFO => t('Info'),
    WATCHDOG_DEBUG => t('Debug'),
  );
}

/**
 * Gets the version information from bugsnag-php library.
 * @param  array $library
 *   An associative array containing all information about the library.
 *
 * @return string
 *   A string containing the version of the library.
 */
function bugsnag_get_version($library) {
  $path = $library['library path'];
  $path = ($library['path'] !== '' ? $path . '/' . $library['path'] : $path);
  $count = 0;

  if (!empty($library['files']['php'])) {
    foreach ($library['files']['php'] as $file => $array) {
      $file_path = DRUPAL_ROOT . '/' . $path . '/' . $file;
      if (file_exists($file_path)) {
        require_once $file_path;
        $count++;
      }
    }
  }

  if ($count) {
    $config = new Bugsnag_Configuration();
    $notification = new Bugsnag_Notification($config);
    $notification = $notification->toArray();
    return $notification['notifier']['version'];
  }
}
